[user]
name = "Stephen Jennings"

[git]
push-branch-prefix = 'jennings/push-'

[ui]
editor = "nvim -n"
diff-editor = "bc"
merge-editor = "bc"

default-command = "logr"

allow-filesets = true

# paginate with delta
diff.format = "git"
pager = ["delta", "--hunk-header-style", "plain", "--paging", "never"]
paginate = "auto"
log-synthetic-elided-nodes = false

[merge-tools.kdiff3]
edit-args = ["--merge", "--cs", "CreateBakFiles=0", "$left", "$left", "$right"]

[merge-tools.bc]
program = "bcomp"
diff-args = ["$left", "$right", "/leftreadonly", "/rightreadonly", "/expandall"]
edit-args = ["$left", "$right", "/leftreadonly", "/expandall"]
merge-args = ["$left", "$right", "$base", "$output", "/expandall", "/automerge", "/reviewconflicts"]
# merge-args = ["$left", "$right", "$base", "$output", "/expandall", "/automerge"]

[merge-tools.bc3]
program = "bcomp"
edit-args = ["$left", "$right", "/expandall", "/mergeoutput=$right", "/leftreadonly", "/rightreadonly"]

[merge-tools.difft]
edit-args = ["$left", "$right", "--color", "always"]

[revsets]
log = 'slice'

[revset-aliases]
# All my commits that haven't landed yet. This is the workhorse.
'open()' = 'mine() ~ ::immutable_heads()'

# All open remote branches
'ropen()' = 'ancestors(::remote_branches() ~ immutable(), 2)'

# Local work that has yet to be pushed
'pending()' = 'ancestors(::branches() ~ ::remote_branches() ~ immutable(), 2)'

# Work in progress
'wip()' = 'description(glob:"wip:*") ~ ::immutable_heads()'

# Branches that are already contained in the trunk
'merged()' = '(branches() & ..trunk()) ~ trunk()'
'mergedr()' = '(remote_branches() & ..trunk()) ~ trunk()'

'recent' = 'recent(20)'
'recent(count)' = 'ancestors(@, count)'

'immutable_heads()' = 'trunk() | tags() | additional_immutable_heads()'
'additional_immutable_heads()' = 'none()'

# set this in a repo to hide their ancestors from the default log revset
'no_log_heads()' = 'none()'

# view a revision's ancestry back to where it diverged from trunk()
'stack' = 'stack(@)'
'stack(from)' = '(trunk()..from) | ancestors((trunk()..from), 2)'

# view a revision's ancestry back to where it diverged from trunk(), plus
# any revisions descended from it
'slice' = 'slice(@)'
'slice(from)' = 'ancestors(reachable(from, ~::trunk()), 2)'

# see the ancestry of two heads back to where they diverged
# usage: compare(abc | foo | bar)
'compare(heads)' = 'connected(ancestors(::heads ~ ::trunk(), 2))'
#'compare2(a,b)' = 'ancestors((stack(a) | stack(b)) ~ (stack(a) & stack(b) & trunk()), 2)'

# anything that hasn't been pushed yet
#'behind' = 'ancestors((trunk()..remote_branches())::, 2)'
'behind' = 'remote_branches().. | ancestors(remote_branches().., 2)'

# @ is annoying to type in PowerShell
at = "@"

[aliases]
logr = ["log", "--reversed"]
logc = ["log", "--reversed", "-T", "builtin_log_comfortable"]
oneline = ["logr", "-T", "simple_log_comfortable"]

# viewing history
#mine = ["logr", "-r", "default & mine()"]
open = ["logr", "-r", "open()"]
ropen = ["logr", "-r", "ropen()"]

dt = ["diff", "--tool", "bc"]
difftool = ["diff", "--tool", "bc"]

diffbranch = ["diff", "--from", "trunk()"]

# navigating
n = ["next", "--edit"]
p = ["prev", "--edit"]

# bring a branch up to date with trunk()
# works with `jj sync` or with `-b REV`
sync = ["rebase", "--skip-empty", "-d", "trunk()"]

[template-aliases]
'format_timestamp(timestamp)' = 'timestamp.ago()'
'simple_log_compact' = '''
if(root,
  builtin_log_root(change_id, commit_id),
  label(if(current_working_copy, "working_copy"),
    concat(
      separate(" ",
        builtin_change_id_with_hidden_and_divergent_info,
        format_short_commit_id(commit_id),
        "(" ++ format_timestamp(committer.timestamp()) ++ ")",
        format_short_signature(author),
        if(branches, "[" ++ branches ++ "]"),
        if(conflict, label("conflict", "conflict")),
      ) ++ "\n",
      separate(" ",
        if(empty, label("empty", "(empty)")),
        if(description, description.first_line(), description_placeholder),
      ) ++ "\n",
    ),
  )
)
'''
'simple_log_comfortable' = 'simple_log_compact ++ "\n"'
'log_git' = '''
if(root,
  format_root_commit(self),
  label(if(current_working_copy, "working_copy"),
    concat(
      separate(" ",
        format_short_commit_id(commit_id),
        format_short_change_id_with_hidden_and_divergent_info(self),
        format_short_signature(author),
        if(conflict, label("conflict", "conflict")),
      ) ++ "\n",
      separate(" ",
        if(empty, label("empty", "(empty)")),
        if(description,
          description.first_line(),
          label(if(empty, "empty"), description_placeholder),
        ),
      ) ++ "\n",
    ),
  )
) ++ "\n"
'''
