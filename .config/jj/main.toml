[user]
name = "Stephen Jennings"

[git]
push-bookmark-prefix = 'jennings/push-'
private-commits = '(description(glob:"private:*") | description(glob:"wip:*"))'

[ui]
editor = "nvim -n"
diff-editor = "bc"
merge-editor = "bc"

default-command = "logr"

allow-filesets = true

# paginate with delta
diff.format = "git"
pager = ["delta", "--hunk-header-style", "plain", "--paging", "never"]
paginate = "auto"
log-synthetic-elided-nodes = false

[merge-tools.kdiff3]
edit-args = ["--merge", "--cs", "CreateBakFiles=0", "$left", "$left", "$right"]

[merge-tools.bc]
program = "bcomp"
diff-args = ["$left", "$right", "/leftreadonly", "/rightreadonly", "/expandall"]
edit-args = ["$left", "$right", "/leftreadonly", "/expandall"]
merge-args = ["$left", "$right", "$base", "$output", "/expandall", "/automerge", "/reviewconflicts"]
# merge-args = ["$left", "$right", "$base", "$output", "/expandall", "/automerge"]

[merge-tools.bc3]
program = "bcomp"
edit-args = ["$left", "$right", "/expandall", "/mergeoutput=$right", "/leftreadonly", "/rightreadonly"]

[merge-tools.difft]
diff-args = ["$left", "$right"]
edit-args = ["$left", "$right"]

[merge-tools.difftinline]
program = "difft"
diff-args = ["$left", "$right", "--display", "inline"]

[revsets]
log = 'slice()'

[revset-aliases]
'default()' = 'default(2)'
'default(n)' = '@ | trunk() | ancestors(immutable_heads().., n)'

# `additional_immutable_heads()` exists to add immutable heads in a repo's
# config without redefining the entire revset
'immutable_heads()' = 'trunk() | tags() | untracked_remote_bookmarks() | additional_immutable_heads()'
'additional_immutable_heads()' = 'none()'

# View the entire branch being worked on
'slice()' = 'slice(@)'
'slice(from)' = 'ancestors(reachable(from, mutable()), 2)'

# All my commits that haven't landed yet. This is the workhorse.
'open()' = 'open(mine())'
'open(domain)' = 'domain ~ ::immutable_heads()'

'scrap' = 'reachable(open() & description(exact:""), mutable())'

# All open remote branches
'ropen()' = 'ancestors(::remote_bookmarks() ~ immutable(), 2)'

# Work in progress
'wip()' = 'description(glob:"wip:*") ~ ::immutable_heads()'

# Any commits considered private by git.private-commits
'private()' = '(description(glob:"private:*") | description(glob:"wip:*"))'

# Branches that are already contained in the trunk (or any other commit)
'merged()' = 'merged(trunk())'
'merged(into)' = 'bookmarks() & ..into'
'mergedr()' = 'mergedr(trunk())'
'mergedr(into)' = 'remote_bookmarks() & ..into'

# history leading up to the working copy, like git log
'last()' = 'last(20)'
'last(n)' = 'ancestors(@, n)'

# Shows recent work with a little bit of context
'recent()' = 'recent(after:"14 days ago")'
'recent(when)' = '''
    ancestors(
        reachable(
            immutable_heads()..(@ | committer_date(when)::),
            mutable()),
        2)
    | trunk()
'''

# view a revision's ancestry back to where it diverged from trunk()
'stack()' = 'stack(@)'
'stack(from)' = 'ancestors((immutable()..from) | from::, 2)'

# see the ancestry of two heads back to where they diverged
# usage: compare(abc | foo | bar)
'compare(heads)' = 'connected(ancestors(::heads ~ ::trunk(), 2)) | heads'

# @ is annoying to type in PowerShell
at = "@"

[aliases]
logr = ["log", "--reversed"]
logc = ["log", "--reversed", "-T", "builtin_log_comfortable"]
oneline = ["logr", "-T", "simple_log_comfortable"]

# show the URLs to open a code review
pr = ["logr", "-T", "pr"]

# abbreviations
b = ["bookmark"]
sq = ["squash"]
ws = ["workspace"]

# viewing history
open = ["logr", "-r", "open(mine())"]
ropen = ["logr", "-r", "ropen()"]
recent = ["logr", "-r", "recent()"]

dt = ["diff", "--tool", "bc"]
difftool = ["diff", "--tool", "bc"]

# navigating
n = ["next", "--edit"]
p = ["prev", "--edit"]

# bring a branch up to date with trunk()
# works with `jj update` alone or with `-b REV`
up = ["rebase", "--skip-emptied", "-d", "trunk()"]

changed = ["diff", "--name-only"]
pushstack = ["git", "push", "-r", "trunk()..@"]

all-bookmark-names = ["bookmark", "list", "--all", "-T", '''
    if(!(remote.starts_with("git") && remote.ends_with("git")),
        separate("@", name, remote) ++ "\n")
''']

# outputs one change ID per line, useful for piping to `wc -l` or
# `Measure-Object`
count = ["log", "--no-graph", "-T", 'change_id ++ "\n"']
