[templates]
log_node = '''
    coalesce(
      if(!self, label("elided", "~")),
      label(
        separate(" ",
          if(current_working_copy, "working_copy"),
          if(immutable, "immutable"),
          if(conflict, "conflict"),
          if(self.contained_in("private()"), "private"),
        ),
        coalesce(
          if(current_working_copy, "@"),
          if(immutable, "◆"),
          if(conflict, "×"),
          if(self.contained_in("private()"), "◌"),
          "○",
        )
      )
    )
    '''

log = 'log'

[template-aliases]
'format_timestamp(timestamp)' = 'timestamp.ago()'

# Greatly simplified output, useful for demonstrations
'simple' = '''
    if(root,
      format_root_commit(self),
      label(if(current_working_copy, "working_copy"),
        concat(
          separate(" ",
            format_short_change_id_with_hidden_and_divergent_info(self),
            format_short_commit_id(commit_id),
            surround("[", "]", bookmarks),
            if(conflict, label("conflict", "conflict")),
            if(empty, label("empty", "(empty)")),
            if(description,
              description.first_line(),
            ),
          ) ++ "\n",
        ),
      )
    )
    '''

'simple_comfortable' = 'simple ++ "\n"'

log = '''
    if(root,
      format_root_commit(self),
      label(if(current_working_copy, "working_copy"),
        concat(
          separate(" ",
            format_short_change_id_with_hidden_and_divergent_info(self),
            format_short_signature(author),
            if(!committer.email(), email_placeholder),
            format_timestamp(committer.timestamp()),
            bookmarks,
            tags,
            working_copies,
            format_short_commit_id(commit_id),
            if(conflict, label("conflict", "conflict")),
          ) ++ "\n",
          separate(" ",
            if(empty, label("empty", "(empty)")),
            if(description,
              description.first_line(),
              label(if(empty, "empty"), description_placeholder),
            ),
          ) ++ "\n",
        ),
      )
    )
    '''

log_comfortable = 'log ++ "\n"'

pr_base = '"undefined"'
pr = '''
    log ++
    self.git_refs().map(|r|
      if(r.name().contains("refs/remotes/") && !r.name().contains("refs/remotes/origin/main"),
        pr_base ++ r.name().remove_prefix("refs/remotes/origin/") ++ "\n",
	""
      )
    ).join("")
    '''
