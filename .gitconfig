[user]
	name = Stephen Jennings
	useConfigOnly = true
[url "git@github.com:"]
	insteadOf = https://github.com/
[includeIf "gitdir:~/src/github.com/**"]
	path = ~/.gitconfig.personal
[core]
	editor = nvim -f
	excludesfile = ~/.gitignore
	autocrlf = input
	safecrlf = true
	pager = delta --hunk-style plain
[init]
	defaultBranch = trunk
[interactive]
	diffFilter = delta --color-only
[alias]
	# shortcuts
	br = branch
	co = checkout
	cp = cherry-pick
	dt = difftool
	lg = log --graph --date="format-local:%Y-%m-%d" --pretty='tformat:%C(auto)%h (%cd)%d %s'
	lga = log --graph --date="format-local:%Y-%m-%d" --pretty='tformat:%C(auto)%h (%cd|%<(10,trunc)%an)%d %s'
	lgc = log --graph --date="format-local:%Y-%m-%d" --pretty='tformat:%C(auto)%h (%cd|%<(10,trunc)%cn)%d %s'
	mt = mergetool
	st = status
	sub = submodule
	wt = worktree

	# comparing local and remote branches
	in = log --graph --date="format-local:%Y-%m-%d" --pretty='tformat:%C(auto)%h (%cd)%d %s' ..@{u}
	inm = !git log --graph --date="format-local:%Y-%m-%d" --pretty='tformat:%C(auto)%h (%cd)%d %s' ..origin/$(git config remote.origin.defaultBranch || echo HEAD)
	out = log --graph --date="format-local:%Y-%m-%d" --pretty='tformat:%C(auto)%h (%cd)%d %s' @{u}..
	outm = !git log --graph --date="format-local:%Y-%m-%d" --pretty='tformat:%C(auto)%h (%cd)%d %s' origin/$(git config remote.origin.defaultBranch || echo HEAD)..
	updated = log --oneline --decorate --no-merges --format='%h %ad %s' --date=short ORIG_HEAD..

	# finding obsolete branches
	merged = !git branch --merged origin/master | grep -v master | grep -v HEAD
	mergedr = !git branch -r --merged origin/master | grep -v master | grep -v HEAD | sed 's@origin/@@'

	# rebasing
	fix = commit --no-verify --fixup
	ri = rebase -i --autosquash
	cont = rebase --continue
	abort = rebase --abort
	skip = rebase --skip

	# marking files as assume-unchanged
	assume = update-index --assume-unchanged
	unassume = update-index --no-assume-unchanged
	assumed = !git ls-files -v | grep ^h | cut -c 3-
	ignored = ls-files -ci --exclude-standard

	# interacting with github/bitbucket
	copr = "!f() { git fetch origin pull/$1/head:pull/$1; git checkout pull/$1; }; f"
	home = "!f() { open $(git-upstream-url home --remote $(git config remote.origin.url)) ; }; f"
	pr = "!f() { open $(git-upstream-url new-pr --remote $(git config remote.origin.url) --branch $(git rev-parse --abbrev-ref HEAD)) ; }; f"

	amend = commit --amend --reuse-message HEAD
	startnew = "!f() { [ -z \"$1\" ] && echo 'Must provide branch name' && exit 1; git checkout --no-track -b $1 origin/$(git config remote.origin.defaultBranch || echo HEAD);}; f"
	pushnew = "!f() { git push -u ${1:-origin} $(git rev-parse --abbrev-ref HEAD);}; f"
	server = !echo git server running on git://$(hostname)/$(basename $(pwd)) && git daemon --verbose --export-all --base-path=.. --reuseaddr ../$(basename $(pwd))
	updatesubs = "submodule foreach \"git pull; git submodule update --init --recursive\""
	wip = "!f() { git commit --no-verify --allow-empty -m 'wip: staged'; git add -A; git commit --no-verify --allow-empty -m 'wip: unstaged'; }; f"
	unwip = "!f() { git reset HEAD~1; git reset --soft HEAD~1; }; f"
	uncommit = reset --soft HEAD~1
	pi = pull --rebase=interactive
	detach = checkout --detach HEAD
[color]
	ui = true
[log]
	decorate = short
	date = iso
[fetch]
	prune = true
[push]
	default = simple
[pull]
	rebase = true
[diff]
	tool = kdiff3
[merge]
	tool = kdiff3
[mergetool]
	keepBackup = false
	prompt = false
[filter "lfs"]
	clean = git-lfs clean -- %f
	smudge = git-lfs smudge -- %f
	required = true
	process = git-lfs filter-process
[grep]
	lineNumber = true
	patternType = extended
[url "ssh://git@heroku.com/"]
	insteadOf = https://git.heroku.com/
[rebase]
	autoSquash = true
